import { SourceCode } from 'projen';
import { TypeScriptProject } from 'projen/lib/typescript';

export interface JestConfigOption {
  /**
   * The relative directory where next.config.js is located in relation to the jest config file.
   *
   * @default "./"
   */
  dir?: string;

  /**
   * The filename of the jest config file being created as a shim for next/jest.
   *
   * @default "jest.config.cjs"
   */
  filename?: string;
}

export class JestConfig extends SourceCode {
  constructor(project: TypeScriptProject, options?: JestConfigOption) {
    super(project, options?.filename ?? 'jest.config.ts');

    const dir = options?.dir ?? './';

    console.log(`Creating JestConfig: ${this.filePath}`);

    if (project.jest?.file?.path) {
      this.line(`// Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import * as fs from 'fs';
import type { Config } from 'jest';
import nextJest from 'next/jest.js'

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: '${dir}',
})

// load the standard Jest config generated by projen
const standardConfig = JSON.parse(fs.readFileSync("${project.jest?.file?.path}", "utf-8"));

// Add any custom config to be passed to Jest
const config: Config = {
  ...standardConfig,
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
  moduleNameMapper: {
    // ...
    '^@/(.*)$': '<rootDir>/$1',
  }
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
export default createJestConfig(config)
`);

      console.log(`JestConfig: ${this.filePath} created.`);
    } else {
      console.log(`Jest? ${project.jest}`);

      console.warn(
        `Jest not disabled or No jest ${this.filePath} config file found in project. Skipping JestConfig generation.`,
      );
    }
  }
}
