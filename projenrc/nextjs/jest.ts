import { TextFile } from 'projen';
import { TypeScriptProject } from 'projen/lib/typescript';

export interface JestConfigOption {
  /**
   * The relative directory where next.config.js is located in relation to the jest config file.
   *
   * @default "./"
   */
  dir?: string;

  /**
   * The filename of the jest config file being created as a shim for next/jest.
   *
   * @default "jest.config.cjs"
   */
  filename?: string;
}

export class JestConfig extends TextFile {
  public readonly project: TypeScriptProject;
  readonly dir: string;
  readonly filePath: string;

  constructor(project: TypeScriptProject, options?: JestConfigOption) {
    super(project, options?.filename ?? 'jest.config.ts');

    this.dir = options?.dir ?? './';
    this.filePath = options?.filename ?? 'jest.config.ts';
    this.project = project;
    this.project.addDevDeps(
      'jest',
      '@types/jest',
      '@jest/reporters',
      '@jest/types',
      'ts-jest',
      'jest-junit',
      'jest-environment-jsdom',
      '@testing-library/jest-dom',
      '@testing-library/dom',
      '@testing-library/react',
    );
    this.project.addGitIgnore('coverage/');
    this.project.addGitIgnore('test-reports/');

    console.log(`Creating JestConfig: ${this.filePath}`);

    project
      .tryFindObjectFile('.projen/tasks.json')
      ?.addOverride('tasks.test.steps', [{ exec: 'jest --passWithNoTests --updateSnapshot --config jest.config.ts' }]);

    this.addLine(`// Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import type { Config } from 'jest';
import nextJest from 'next/jest.js'

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: '${this.dir}',
})`);

    this.addLine(`
// Add any custom config to be passed to Jest
const config: Config = {`);

    if (this.project.jest?.file?.path) {
      this.addLine(`  ...standardConfig,`);
    }

    this.addLine(`  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  testMatch: [
    "<rootDir>/@(src|test)/**/*(*.)@(spec|test).ts?(x)",
    "<rootDir>/@(src|test)/**/__tests__/**/*.ts?(x)",
    "<rootDir>/@(projenrc)/**/*(*.)@(spec|test).ts?(x)",
    "<rootDir>/@(projenrc)/**/__tests__/**/*.ts?(x)"
  ],
  clearMocks: true,
  collectCoverage: true,
  coverageReporters: [
    "json",
    "lcov",
    "clover",
    "cobertura",
    "text"
  ],
  coverageDirectory: "coverage",
  coveragePathIgnorePatterns: [
    "/node_modules/"
  ],
  testPathIgnorePatterns: [
      "/node_modules/"
  ],
  watchPathIgnorePatterns: [
    "/node_modules/"
  ],
  reporters: [
    "default",
    [
      "jest-junit",
      {
        "outputDirectory": "test-reports"
      }
    ]
  ],
  transform: {
    "^.+\\.[t]sx?$": [
      "ts-jest",
      {
        "tsconfig": "tsconfig.dev.json"
      }
    ]
  },
  // A list of paths to modules that run some code to configure or set up the testing framework before each test
  setupFilesAfterEnv: ['@testing-library/jest-dom'],
  moduleNameMapper: {
    // ...
    '^@/(.*)$': '<rootDir>/$1',
  },
  // Automatically clear mock calls and instances between every test
  globals: {
    'ts-jest': {
      TsConfig: 'tsconfig.test.json',
    },
  },
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
export default createJestConfig(config)
`);
  }
}
